name: CI

on:
  push:
    branches: [ main ]
    paths:
      - "**/*.sln"
      - "**/*.csproj"
      - "**/*.cs"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "**/*.sln"
      - "**/*.csproj"
      - "**/*.cs"
      - ".github/workflows/ci.yml"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      COV_ASSEMBLY_FILTER: "+Morning.Value.*"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet packages
        id: cache_nuget
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache status
        shell: bash
        run: |
          echo "NuGet cache hit: ${{ steps.cache_nuget.outputs['cache-hit'] }}"

      - name: Restore
        shell: bash
        run: |
          sln=$(ls -1 **/*.sln 2>/dev/null | head -n 1 || true)
          if [ -n "$sln" ]; then
            echo "Restoring solution: $sln"
            dotnet restore "$sln"
          else
            echo "No .sln found, restoring all projects"
            dotnet restore
          fi

      - name: Build (Release)
        shell: bash
        run: |
          sln=$(ls -1 **/*.sln 2>/dev/null | head -n 1 || true)
          if [ -n "$sln" ]; then
            dotnet build "$sln" -c Release --no-restore
          else
            dotnet build -c Release --no-restore
          fi

      # Detecta *.Test.csproj y *.Tests.csproj (case-insensitive) y ejecuta cobertura
      - name: Test with coverage (detect *.Test*.csproj)
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/test
          echo "Buscando proyectos de pruebas (*.Test.csproj | *.Tests.csproj)..."
          projs=$(git ls-files "**/*.csproj" | grep -Ei "(\.Test|\.Tests)\.csproj$" || true)
          if [ -z "$projs" ]; then
            echo "No se encontraron proyectos de pruebas."
            echo "DiagnÃ³stico (lista de .csproj encontrados):"
            git ls-files "**/*.csproj" || true
            exit 1
          fi
          for p in $projs; do
            name=$(basename "$p" .csproj)
            out="artifacts/test/$name"
            mkdir -p "$out"
            echo ">> Ejecutando tests en $p"
            dotnet test "$p" -c Release --no-build \
              --results-directory "$out" \
              --collect:"XPlat Code Coverage" \
              --logger "trx;LogFileName=${name}.trx"
          done

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Create coverage report
        shell: bash
        run: |
          export PATH="$PATH:$HOME/.dotnet/tools"
          reportgenerator \
            -reports:"artifacts/test/**/coverage.cobertura.xml" \
            -targetdir:"coverage" \
            -reporttypes:"HtmlInline;Cobertura;MarkdownSummary" \
            -assemblyfilters:"+Morning.Value.*"
          echo "### Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
          cat coverage/Summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage
          if-no-files-found: warn
          retention-days: 7

      - name: Upload test results (trx + coverage raw)
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            artifacts/test/**/*.trx
            artifacts/test/**/coverage.cobertura.xml
          if-no-files-found: warn
          retention-days: 7
